name: product-catalog-ci

on:
  push:
    branches:
      - main
  pull_request:  # Run on PRs too (shift-left checks)
    branches:
      - main

jobs:
  ### 1️⃣ Code Quality & Linting ###
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.55.2
          working-directory: src/product-catalog

  ### 2️⃣ Build & Unit Tests ###
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22

      - name: Download dependencies
        run: |
          cd src/product-catalog
          go mod download

      - name: Run unit tests
        run: |
          cd src/product-catalog
          go test ./... -v -coverprofile=coverage.out

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: src/product-catalog/coverage.out

  ### 3️⃣ Dependency Security Scan (SCA) ###
  dependency-scan:
    runs-on: ubuntu-latest
    needs: build-test
    environment: my_env   # ✅ Enables access to SNYK_TOKEN from environment secrets
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/golang@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --severity-threshold=high

      - name: Monitor project in Snyk (optional)
        uses: snyk/actions/golang@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor

  ### 4️⃣ Docker Build & Push ###
  docker:
    runs-on: ubuntu-latest
    needs: [build-test, dependency-scan]
    environment: my_env
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Image
        uses: docker/build-push-action@v6
        with:
          context: src/product-catalog
          file: src/product-catalog/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/product-catalog:${{ github.sha }}

  ### 5️⃣ Container Security Scan (Image Scanning) ###
  image-scan:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Install Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/product-catalog:${{ github.sha }}
          format: 'table'
          severity: 'CRITICAL,HIGH'

  ### 6️⃣ Deploy to Staging (Dev K8s) ###
  deploy-staging:
    runs-on: ubuntu-latest
    needs: image-scan
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update Kubernetes manifest
        run: |
          IMAGE="${{ secrets.DOCKER_USERNAME }}/product-catalog:${{ github.sha }}"
          sed -i -E "s|(image:\s*)(.*product-catalog:).*|\1${IMAGE}|" kubernetes/productcatalog/deploy.yaml

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" > kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml

      - name: Deploy to Staging
        run: kubectl apply -f kubernetes/productcatalog/deploy.yaml

  ### 7️⃣ Integration Tests on Staging ###
  integration-test:
    runs-on: ubuntu-latest
    needs: deploy-staging
    steps:
      - name: Run API tests
        run: |
          curl -f http://staging.product-catalog.mycompany.com/healthz

  ### 8️⃣ Approval for Production ###
  approve-prod:
    runs-on: ubuntu-latest
    needs: integration-test
    environment:
      name: production
      url: https://product-catalog.mycompany.com
    steps:
      - name: Await manual approval
        run: echo "Manual approval required before deploying to production."

  ### 9️⃣ Deploy to Production ###
  deploy-prod:
    runs-on: ubuntu-latest
    needs: approve-prod
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PROD }}" > kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml

      - name: Deploy to Production
        run: kubectl apply -f kubernetes/productcatalog/deploy.yaml

  ### 🔟 Post-Deployment Monitoring Hook ###
  monitor:
    runs-on: ubuntu-latest
    needs: deploy-prod
    steps:
      - name: Health check
        run: |
          curl -f https://product-catalog.mycompany.com/healthz

      - name: Notify Datadog
        run: |
          curl -X POST "https://api.datadoghq.com/api/v1/events" \
          -H "Content-Type: application/json" \
          -H "DD-API-KEY: ${{ secrets.DD_API_KEY }}" \
          -d '{"title":"Product Catalog Deployment","text":"Deployment successful","priority":"normal"}'
